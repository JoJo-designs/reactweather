{"version":3,"sources":["components/searchbar.js","components/images/802.svg","components/images/800.svg","components/images/803.svg","components/images/601.svg","components/images/501.svg","components/fiveDay.js","components/images/302.svg","components/body.js","components/history.js","components/images/background.jpg","components/header.js","app.js","components/DBConfig.js","index.js"],"names":["SearchBar","props","useState","searchValue","setSearchValue","a","fetch","res","json","data","NewHistory","sendState","console","log","onChange","add","useIndexedDB","cityName","lat","lon","then","event","error","className","placeholder","value","name","type","target","inputValue","onClick","FiveDay","fiveday","day","fiveDay","splice","map","dt","moment","format","id","weather","src","lightRain","alt","snow","sunny","scatteredClouds","brokenClouds","description","Math","floor","temp","humidity","Body","cityData","appData","setAppData","useEffect","hasData","fetchData","toUpperCase","substring","capitalize","current","round","wind_speed","uvi","heavyRain","selectImage","daily","History","getAll","history","setHistory","handleClick","Header","setCityData","style","backgroundImage","backgroundImg","App","initDB","version","objectStoresMeta","store","storeConfig","keyPath","autoIncrement","storeSchema","option","unique","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff035333.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useIndexedDB } from 'react-indexed-db';\nimport '../styles/searchbar.css'\n\nexport default function SearchBar(props) {\n\n    const [ searchValue, setSearchValue ] = useState('')\n\n    const handleChange = (event) => {\n        const { target } = event;\n        const inputValue = target.value;\n        const inputType = target.name;\n\n        if (inputType === \"searchValue\") {\n            setSearchValue(inputValue)\n        }\n    }\n\n    async function getGeo() {\n        try {\n            const res = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${searchValue}&appid=89e0b7e8dbbac9434ed75176dac7f8a3`)\n            const data = await res.json()\n            NewHistory(data)\n            sendState(data)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const sendState = (data) => {\n        props.onChange(data)\n    }\n    \n         const NewHistory = (data) => {\n        console.log(data)\n        const { add } = useIndexedDB('cities')\n        add({cityName: searchValue, lat: data[0].lat, lon: data[0].lon}).then(\n            event => {\n                console.log('ID Generated: ', event)\n            },\n            error => {\n                console.log(error)\n            }\n        );\n    };\n\n\n    return (\n        <div className=\"searchBox\">\n            <input \n            className=\"inputbox\"\n            placeholder=\"Search a City\"\n            value={searchValue}\n            name=\"searchValue\"\n            type=\"text\"\n            onChange={handleChange}\n            >  \n            </input>\n            <button onClick={getGeo} className=\"searchBtn\">Search</button>\n        </div>\n    )\n}","export default __webpack_public_path__ + \"static/media/802.e7dd3721.svg\";","export default __webpack_public_path__ + \"static/media/800.41c6c635.svg\";","export default __webpack_public_path__ + \"static/media/803.e6537cfd.svg\";","export default __webpack_public_path__ + \"static/media/601.80108998.svg\";","export default __webpack_public_path__ + \"static/media/501.200911b6.svg\";","import React from 'react';\nimport '../styles/body.css'\nimport moment from 'moment'\nimport scatteredClouds from './images/802.svg'\nimport sunny from './images/800.svg'\nimport brokenClouds from './images/803.svg'\nimport snow from './images/601.svg'\nimport lightRain from './images/501.svg'\n\nexport default function FiveDay(fiveday) {\n    let day = fiveday.fiveDay.splice(1,5)\n    console.log(day)\n\nconst convertTime = (dt) => {\n    dt = dt * 1000\n    const format = moment(dt).format(\"MMMM Do YYYY\")\n    return format\n}\n\nconst selectImage = (id) => { \n    console.log(id)\n    \n        if (id === 301 ||id === 500 || id === 501) {\n            console.log(\"500 or 501\")\n            return <img className=\"smallerImg\" src={lightRain} alt=\"cloud with light rain\"></img>\n        }\n        if (id === 600 || id === 601 || id === 616) {\n            console.log(\"600 or 601\")\n            return <img className=\"smallerImg\" src={snow} alt=\"cloud with snow\"></img>\n        }\n        if (id === 800) {\n            console.log(\"800\")\n            return <img className=\"smallerImg\" src={sunny} alt=\"Sunny weather\"></img>\n        }\n        if (id === 801 || id === 802 || id === 803) {\n            console.log(\"801 or 802 or 804\")\n            return <img className=\"smallerImg\" src={scatteredClouds} alt=\"Cloudy weather\"></img>\n        }\n        if (id === 804) {\n            console.log(\"804\")\n            return <img className=\"smallerImg\" src={brokenClouds} alt=\"Few Clouds\"></img>\n        }\n}\n \n   return(\n       <div>\n           <h3 className=\"five\">Five Day Forecast </h3>\n           {day.map((value) => \n           <div className=\"fiveBoxes\" key={value.dt}>\n               <p className=\"date\">{convertTime(value.dt)}</p>\n                <div className=\"centerImg\">{selectImage(value.weather[0].id)}</div>\n                <p className=\"dailytext\">{value.weather[0].description}</p>\n                <p className=\"dailytext\">Temp: {Math.floor(value.temp.day)}</p>\n                <p className=\"dailytext\">Humidity: {Math.floor(value.humidity)}</p>\n           </div>\n\n           )}\n       </div>\n   )\n}","export default __webpack_public_path__ + \"static/media/302.69228fb0.svg\";","import React, { useState, useEffect } from 'react';\n// import Moment from 'react-moment';\nimport FiveDay from './fiveDay';\nimport '../styles/body.css'\nimport '../styles/alignment.css'\nimport scatteredClouds from './images/802.svg'\nimport sunny from './images/800.svg'\nimport brokenClouds from './images/803.svg'\nimport snow from './images/601.svg'\nimport lightRain from './images/501.svg'\nimport heavyRain from './images/302.svg'\n\n\nexport default function Body(cityData) {\n\n    const [ appData, setAppData ] = useState('')\n\n    async function fetchData() {\n        console.log(cityData.cityData.lat)\n        try {\n            const res = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${cityData.cityData.lat}&lon=${cityData.cityData.lon}&exclude=minutely,hourly,alerts&units=metric&appid=89e0b7e8dbbac9434ed75176dac7f8a3`)\n            const weather = await res.json()\n            console.log(weather)\n            setAppData(weather)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    useEffect( () => {\n        if(cityData.cityData.hasData === true) {\n            fetchData()\n        }\n    }, [cityData]);\n\n\n    const capitalize = () => {\n        const name = cityData.cityData.cityName\n        return name[0].toUpperCase() + name.substring(1)\n    }\n\n    // uvIndex will find the uv index and return it with the class that matches \n    // level\n    const uvIndex = () => {\n        if (appData.current.uvi < 3) {\n            console.log(\"UV is Low\")\n            return ( <h3 className=\" uv low\">UV Index: {appData.current.uvi}</h3> )\n        }\n        if (appData.current.uvi < 4 &&  appData.current.uvi > 7) {\n            console.log(\"UV is Mid\")\n            return ( <h3 className=\" uv mid\">UV Index: {appData.current.uvi}</h3> )\n        }\n        if (appData.current.uvi > 8) {\n            console.log(\"UV is High\")\n            return ( <h3 className=\" uv high\">UV Index: {appData.current.uvi}</h3> )\n        }\n    }\n\n    // selectImage use weather data and returns a matching image. the images the api\n    // provides are very small. \n    const selectImage = () => { \n        const id = appData.current.weather[0].id\n\n        if (id === 302) {\n            return <img src={heavyRain} alt=\"cloud with light rain\"></img>\n        }\n            if (id === 301 ||id === 500 || id === 501) {\n                console.log(\"500 or 501\")\n                return <img src={lightRain} alt=\"cloud with light rain\"></img>\n            }\n            if (id === 600 || id === 601 || id === 616) {\n                console.log(\"600 or 601\")\n                return <img src={snow} alt=\"cloud with snow\"></img>\n            }\n            if (id === 800) {\n                console.log(\"800\")\n                return <img src={sunny} alt=\"Sunny weather\"></img>\n            }\n            if (id === 801 || id === 802 || id === 803) {\n                console.log(\"801 or 802 or 804\")\n                return <img src={scatteredClouds} alt=\"Cloudy weather\"></img>\n            }\n            if (id === 804) {\n                console.log(\"804\")\n                return <img src={brokenClouds} alt=\"Few Clouds\"></img>\n            }\n    }\n    \n\n    return(\n        \n        <div >\n            { appData ?  \n            <div>\n            <div className=\"forecast\">\n                <h2 className=\"bodyHeader\">{capitalize()} Current Forecast</h2>\n                {/* dataBox wraps all the data */}\n                <div className=\"dataBox\"> \n                {/* data only wraps the data displayed with word */}\n                <div className=\"data\">\n                {/* <Moment format=\"ddd MMM, D\"></Moment> */}\n                <h3>Temp: {Math.floor(appData.current.temp)}</h3>\n                <h3>Humidity: {Math.round(appData.current.humidity)}</h3>\n                <h3>Wind Speed: {Math.round(appData.current.wind_speed)}</h3>\n                <div>{uvIndex()}</div>\n                </div>\n                {/* weatherImg is just the image */}\n                <div className=\"weatherImg\">{selectImage()}\n                <p>{appData.current.weather[0].description}</p>\n                </div>\n                </div>\n                </div>\n\n                {/* this is the five day forecast  */}\n                <div>\n                    <FiveDay fiveDay={appData.daily}/>\n                </div>\n    \n                \n            </div> \n            :\n            <h2>Waiting for data...</h2>\n            }\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport { useIndexedDB } from 'react-indexed-db';\nimport '../styles/searchbar.css'\n\nexport default function History(props) {\n    const { getAll } = useIndexedDB('cities')\n    const [history, setHistory] = useState('')\n\n    useEffect(() => {\n        getAll().then(data => {\n            setHistory(data)\n        });\n    }, []);\n\n    const handleClick = (data) => {\n        sendState(data)\n    }\n\n    const sendState = (data) => {\n        props.onChange(data)\n    }\n    \n    return(\n        <div>\n            { history ? \n            <div>\n                {history.map((data) => (\n                    <button className=\"historyBtns\" key={data.id} \n                    onClick={() => handleClick(data)}\n                    >{data.cityName}</button>\n                ))}\n            </div>\n            :\n            <div><h4> waiting... </h4></div>\n            } \n        </div>\n    )\n}","export default __webpack_public_path__ + \"static/media/background.3b5a2f62.jpg\";","import React, { useState } from 'react';\nimport SearchBar from './searchbar';\nimport Body from './body';\nimport History from './history';\n// import '../styles/skeleton.css'\nimport '../styles/alignment.css'\nimport '../styles/style.css'\nimport backgroundImg from './images/background.jpg'\n\n\n\nexport function Header() {\n\n    const [cityData, setCityData] = useState({\n        cityName: '',\n        lat: '',\n        lon: '',\n        hasData: false\n    })\n\n    function handleUpdate(data) {\n        setCityData({cityName: data[0].name, lat: data[0].lat, lon: data[0].lon, hasData: true})\n    }\n\n    function UpdateHistory(data) {\n        setCityData({cityName: data.cityName, lat: data.lat, lon: data.lon, hasData: true})\n    }\n\n    const isData = () => {\n        if (cityData.hasData === true) {\n            return <Body cityData={cityData}/>\n        } else {\n            return <h3>No data yet</h3>\n        }\n    }\n\n    return (\n    <div style={{ backgroundImage: `url(${backgroundImg})`}}>\n        <h1 className=\"header\">Weather Dashboard</h1>\n        \n        <div className=\"bg\">\n            {/* section is around everything */}\n        <section className=\"container\">   \n            {/* this part is components that take a user input */}\n            <div className=\"oneThrid\">\n        <SearchBar cityData={cityData} onChange={handleUpdate}/>\n        <History cityData={cityData} onChange={UpdateHistory}/>\n            </div>\n\n        {/* this part doesn't take user inputs */}\n         <div className=\"twoThrids\">\n            {isData()}\n        </div>\n\n        </section> \n\n        </div>\n    </div>\n    );\n};\n\n","import { Header } from './components/header';\nimport { DBConfig } from './components/DBConfig';\nimport { initDB } from 'react-indexed-db';\n\ninitDB(DBConfig);\n\nexport default function App() {\n  return (\n    <div>\n      <Header />\n    </div>\n  );\n}","export const DBConfig = {\n    name: 'citiesDB',\n    version: 1,\n    objectStoresMeta: [\n        {\n            store: 'cities',\n            storeConfig: { keyPath: 'id', autoIncrement: true },\n            storeSchema: [\n                {name: 'cityName', keyPath: 'cityName', option: {unique: true}},\n                {name: 'lat', keyPath: 'lat', option: {unique: true}},\n                {name: 'lon', keyPath: 'lon', option: {unique: true}}\n            ]\n        }\n    ]\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}