{"version":3,"sources":["components/searchbar.js","components/fiveDay.js","components/images/802.svg","components/images/800.svg","components/images/803.svg","components/images/601.svg","components/images/501.svg","components/body.js","components/history.js","components/images/background.jpg","components/header.js","app.js","components/DBConfig.js","index.js"],"names":["SearchBar","props","useState","searchValue","setSearchValue","a","fetch","res","json","data","NewHistory","sendState","console","log","onChange","add","useIndexedDB","cityName","lat","lon","then","event","error","className","placeholder","value","name","type","target","inputValue","onClick","FiveDay","fiveday","Body","cityData","appData","setAppData","weather","useEffect","hasData","fetchData","toUpperCase","substring","capitalize","Math","floor","current","temp","round","humidity","wind_speed","uvi","id","src","lightRain","snow","sunny","scatteredClouds","brokenClouds","selectImage","description","fiveDay","daily","History","getAll","history","setHistory","map","handleClick","Header","setCityData","style","backgroundImage","backgroundImg","class","App","initDB","version","objectStoresMeta","store","storeConfig","keyPath","autoIncrement","storeSchema","option","unique","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.febf80d8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useIndexedDB } from 'react-indexed-db';\nimport '../styles/searchbar.css'\n\nexport default function SearchBar(props) {\n\n    const [ searchValue, setSearchValue ] = useState('')\n\n    const handleChange = (event) => {\n        const { target } = event;\n        const inputValue = target.value;\n        const inputType = target.name;\n\n        if (inputType === \"searchValue\") {\n            setSearchValue(inputValue)\n        }\n    }\n\n    async function getGeo() {\n        try {\n            const res = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${searchValue}&appid=89e0b7e8dbbac9434ed75176dac7f8a3`)\n            const data = await res.json()\n            NewHistory(data)\n            sendState(data)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const sendState = (data) => {\n        props.onChange(data)\n    }\n    \n         const NewHistory = (data) => {\n        console.log(data)\n        const { add } = useIndexedDB('cities')\n        add({cityName: searchValue, lat: data[0].lat, lon: data[0].lon}).then(\n            event => {\n                console.log('ID Generated: ', event)\n            },\n            error => {\n                console.log(error)\n            }\n        );\n    };\n\n\n    return (\n        <div className=\"searchBox\">\n            <input \n            className=\"inputbox\"\n            placeholder=\"Search a City\"\n            value={searchValue}\n            name=\"searchValue\"\n            type=\"text\"\n            onChange={handleChange}\n            >  \n            </input>\n            <button onClick={getGeo} className=\"searchBtn\">Search</button>\n        </div>\n    )\n}","import React from 'react';\n\nexport default function FiveDay(fiveday) {\n    console.log(fiveday)\n \n   return(\n       <div>this is a working page</div>\n   )\n}","export default __webpack_public_path__ + \"static/media/802.e7dd3721.svg\";","export default __webpack_public_path__ + \"static/media/800.41c6c635.svg\";","export default __webpack_public_path__ + \"static/media/803.e6537cfd.svg\";","export default __webpack_public_path__ + \"static/media/601.80108998.svg\";","export default __webpack_public_path__ + \"static/media/501.200911b6.svg\";","import React, { useState, useEffect } from 'react';\n// import Moment from 'react-moment';\nimport FiveDay from './fiveDay';\nimport '../styles/body.css'\nimport '../styles/alignment.css'\nimport scatteredClouds from './images/802.svg'\nimport sunny from './images/800.svg'\nimport brokenClouds from './images/803.svg'\nimport snow from './images/601.svg'\nimport lightRain from './images/501.svg'\n\n\nexport default function Body(cityData) {\n\n    const [ appData, setAppData ] = useState('')\n\n    async function fetchData() {\n        console.log(cityData.cityData.lat)\n        try {\n            const res = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${cityData.cityData.lat}&lon=${cityData.cityData.lon}&exclude=minutely,hourly,alerts&units=metric&appid=89e0b7e8dbbac9434ed75176dac7f8a3`)\n            const weather = await res.json()\n            console.log(weather)\n            setAppData(weather)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    useEffect( () => {\n        if(cityData.cityData.hasData === true) {\n            fetchData()\n        }\n    }, [cityData]);\n\n\n    const capitalize = () => {\n        const name = cityData.cityData.cityName\n        return name[0].toUpperCase() + name.substring(1)\n    }\n\n    // uvIndex will find the uv index and return it with the class that matches \n    // level\n    const uvIndex = () => {\n        if (appData.current.uvi < 3) {\n            console.log(\"UV is Low\")\n            return ( <h3 className=\" uv low\">UV Index: {appData.current.uvi}</h3> )\n        }\n        if (appData.current.uvi < 4 &&  appData.current.uvi > 7) {\n            console.log(\"UV is Mid\")\n            return ( <h3 className=\" uv mid\">UV Index: {appData.current.uvi}</h3> )\n        }\n        if (appData.current.uvi > 8) {\n            console.log(\"UV is High\")\n            return ( <h3 className=\" uv high\">UV Index: {appData.current.uvi}</h3> )\n        }\n    }\n\n    // selectImage use weather data and returns a matching image. the images the api\n    // provides are very small. \n    const selectImage = () => { \n        const id = appData.current.weather[0].id\n            if (id === 500 || id === 501) {\n                console.log(\"500 or 501\")\n                return <img src={lightRain}></img>\n            }\n            if (id === 600 || id === 601) {\n                console.log(\"600 or 601\")\n                return <img src={snow}></img>\n            }\n            if (id === 800) {\n                console.log(\"800\")\n                return <img src={sunny}></img>\n            }\n            if (id === 801 || id === 802 || id === 803) {\n                console.log(\"801 or 802 or 804\")\n                return <img src={scatteredClouds}></img>\n            }\n            if (id === 804) {\n                console.log(\"804\")\n                return <img src={brokenClouds}></img>\n            }\n    }\n    \n\n    return(\n        \n        <div >\n            { appData ?\n            <div className=\"forecast\">\n                <h2 className=\"bodyHeader\">{capitalize()} Current Forecast</h2>\n                {/* dataBox wraps all the data */}\n                <div className=\"dataBox\"> \n                {/* data only wraps the data displayed with word */}\n                <div className=\"data\">\n                {/* <Moment format=\"ddd MMM, D\"></Moment> */}\n                <h3>Temp: {Math.floor(appData.current.temp)}</h3>\n                <h3>Humidity: {Math.round(appData.current.humidity)}</h3>\n                <h3>Wind Speed: {Math.round(appData.current.wind_speed)}</h3>\n                <div>{uvIndex()}</div>\n                </div>\n                {/* weatherImg is just the image */}\n                <div className=\"weatherImg\">{selectImage()}\n                <p>{appData.current.weather[0].description}</p>\n                </div>\n                </div>\n\n                {/* this is the five day forecast */}\n                <div className=\"move\">\n                    <FiveDay fiveDay={appData.daily}/>\n                </div>\n                \n            </div> \n            :\n            <h2>Waiting for data...</h2>\n            }\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport { useIndexedDB } from 'react-indexed-db';\nimport '../styles/searchbar.css'\n\nexport default function History(props) {\n    const { getAll } = useIndexedDB('cities')\n    const [history, setHistory] = useState('')\n\n    useEffect(() => {\n        getAll().then(data => {\n            setHistory(data)\n        });\n    }, []);\n\n    const handleClick = (data) => {\n        sendState(data)\n    }\n\n    const sendState = (data) => {\n        props.onChange(data)\n    }\n    \n    return(\n        <div>\n            { history ? \n            <div>\n                {history.map((data) => (\n                    <button className=\"historyBtns\" key={data.id} \n                    onClick={() => handleClick(data)}\n                    >{data.cityName}</button>\n                ))}\n            </div>\n            :\n            <div><h4> waiting... </h4></div>\n            } \n        </div>\n    )\n}","export default __webpack_public_path__ + \"static/media/background.3b5a2f62.jpg\";","import React, { useState } from 'react';\nimport SearchBar from './searchbar';\nimport Body from './body';\nimport History from './history';\n// import '../styles/skeleton.css'\nimport '../styles/alignment.css'\nimport '../styles/style.css'\nimport backgroundImg from './images/background.jpg'\n\n\n\nexport function Header() {\n\n    const [cityData, setCityData] = useState({\n        cityName: '',\n        lat: '',\n        lon: '',\n        hasData: false\n    })\n\n    function handleUpdate(data) {\n        setCityData({cityName: data[0].name, lat: data[0].lat, lon: data[0].lon, hasData: true})\n    }\n\n    function UpdateHistory(data) {\n        setCityData({cityName: data.cityName, lat: data.lat, lon: data.lon, hasData: true})\n    }\n\n    const isData = () => {\n        if (cityData.hasData === true) {\n            return <Body cityData={cityData}/>\n        } else {\n            return <h3>No data yet</h3>\n        }\n    }\n\n    return (\n    <div style={{ backgroundImage: `url(${backgroundImg})`}}>\n        <h1 className=\"header\">Weather Dashboard</h1>\n        \n        <div className=\"bg\">\n            {/* section is around everything */}\n        <section class=\"container\">   \n            {/* this part is components that take a user input */}\n            <div className=\"oneThrid\">\n        <SearchBar cityData={cityData} onChange={handleUpdate}/>\n        <History cityData={cityData} onChange={UpdateHistory}/>\n            </div>\n\n        {/* this part doesn't take user inputs */}\n         <div className=\"twoThrids\">\n            {isData()}\n        </div>\n\n        </section> \n\n        </div>\n    </div>\n    );\n};\n\n","import { Header } from './components/header';\nimport { DBConfig } from './components/DBConfig';\nimport { initDB } from 'react-indexed-db';\n\ninitDB(DBConfig);\n\nexport default function App() {\n  return (\n    <div>\n      <Header />\n    </div>\n  );\n}","export const DBConfig = {\n    name: 'citiesDB',\n    version: 1,\n    objectStoresMeta: [\n        {\n            store: 'cities',\n            storeConfig: { keyPath: 'id', autoIncrement: true },\n            storeSchema: [\n                {name: 'cityName', keyPath: 'cityName', option: {unique: true}},\n                {name: 'lat', keyPath: 'lat', option: {unique: true}},\n                {name: 'lon', keyPath: 'lon', option: {unique: true}}\n            ]\n        }\n    ]\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}